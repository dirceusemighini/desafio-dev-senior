// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package generated

import soapenvelope12.Faultreason

/**
usage:
val obj = scalaxb.fromXML[br.com.maplink.webservice.generated.Foo](node)
val document = scalaxb.toXML[br.com.maplink.webservice.generated.Foo](obj, "foo", br.com.maplink.webservice.generated.defaultScope)
  * */
object `package` extends XMLProtocol {}

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://webservices.maplink2.com.br",
    Some("tns") -> "http://webservices.maplink2.com.br",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val GeneratedFindPOIFormat: scalaxb.XMLFormat[generated.FindPOI] = new DefaultGeneratedFindPOIFormat {}
  implicit lazy val GeneratedResultRangeFormat: scalaxb.XMLFormat[generated.ResultRange] = new DefaultGeneratedResultRangeFormat {}
  implicit lazy val GeneratedFindPOIResponseFormat: scalaxb.XMLFormat[generated.FindPOIResponse] = new DefaultGeneratedFindPOIResponseFormat {}
  implicit lazy val GeneratedPOIInfoFormat: scalaxb.XMLFormat[generated.POIInfo] = new DefaultGeneratedPOIInfoFormat {}
  implicit lazy val GeneratedArrayOfPOILocationFormat: scalaxb.XMLFormat[generated.ArrayOfPOILocation] = new DefaultGeneratedArrayOfPOILocationFormat {}
  implicit lazy val GeneratedPOILocationFormat: scalaxb.XMLFormat[generated.POILocation] = new DefaultGeneratedPOILocationFormat {}
  implicit lazy val GeneratedFindAddressFormat: scalaxb.XMLFormat[generated.FindAddress] = new DefaultGeneratedFindAddressFormat {}
  implicit lazy val GeneratedAddressFormat: scalaxb.XMLFormat[generated.Address] = new DefaultGeneratedAddressFormat {}
  implicit lazy val GeneratedAddressOptionsFormat: scalaxb.XMLFormat[generated.AddressOptions] = new DefaultGeneratedAddressOptionsFormat {}
  implicit lazy val GeneratedFindAddressResponseFormat: scalaxb.XMLFormat[generated.FindAddressResponse] = new DefaultGeneratedFindAddressResponseFormat {}
  implicit lazy val GeneratedAddressInfoFormat: scalaxb.XMLFormat[generated.AddressInfo] = new DefaultGeneratedAddressInfoFormat {}
  implicit lazy val GeneratedArrayOfAddressLocationFormat: scalaxb.XMLFormat[generated.ArrayOfAddressLocation] = new DefaultGeneratedArrayOfAddressLocationFormat {}
  implicit lazy val GeneratedAddressLocationFormat: scalaxb.XMLFormat[generated.AddressLocation] = new DefaultGeneratedAddressLocationFormat {}
  implicit lazy val GeneratedGetAddressFormat: scalaxb.XMLFormat[generated.GetAddress] = new DefaultGeneratedGetAddressFormat {}
  implicit lazy val GeneratedGetAddressResponseFormat: scalaxb.XMLFormat[generated.GetAddressResponse] = new DefaultGeneratedGetAddressResponseFormat {}
  implicit lazy val GeneratedGetXYFormat: scalaxb.XMLFormat[generated.GetXY] = new DefaultGeneratedGetXYFormat {}
  implicit lazy val GeneratedGetXYResponseFormat: scalaxb.XMLFormat[generated.GetXYResponse] = new DefaultGeneratedGetXYResponseFormat {}
  implicit lazy val GeneratedGetXYRadiusWithMapFormat: scalaxb.XMLFormat[generated.GetXYRadiusWithMap] = new DefaultGeneratedGetXYRadiusWithMapFormat {}
  implicit lazy val GeneratedGetXYRadiusWithMapResponseFormat: scalaxb.XMLFormat[generated.GetXYRadiusWithMapResponse] = new DefaultGeneratedGetXYRadiusWithMapResponseFormat {}
  implicit lazy val GeneratedFindCityFormat: scalaxb.XMLFormat[generated.FindCity] = new DefaultGeneratedFindCityFormat {}
  implicit lazy val GeneratedFindCityResponseFormat: scalaxb.XMLFormat[generated.FindCityResponse] = new DefaultGeneratedFindCityResponseFormat {}
  implicit lazy val GeneratedCityLocationInfoFormat: scalaxb.XMLFormat[generated.CityLocationInfo] = new DefaultGeneratedCityLocationInfoFormat {}
  implicit lazy val GeneratedArrayOfCityLocationFormat: scalaxb.XMLFormat[generated.ArrayOfCityLocation] = new DefaultGeneratedArrayOfCityLocationFormat {}
  implicit lazy val GeneratedCityLocationFormat: scalaxb.XMLFormat[generated.CityLocation] = new DefaultGeneratedCityLocationFormat {}
  implicit lazy val GeneratedGetCrossStreetXYFormat: scalaxb.XMLFormat[generated.GetCrossStreetXY] = new DefaultGeneratedGetCrossStreetXYFormat {}
  implicit lazy val GeneratedGetCrossStreetXYResponseFormat: scalaxb.XMLFormat[generated.GetCrossStreetXYResponse] = new DefaultGeneratedGetCrossStreetXYResponseFormat {}
  implicit lazy val GeneratedArrayOfCrossStreetLocationFormat: scalaxb.XMLFormat[generated.ArrayOfCrossStreetLocation] = new DefaultGeneratedArrayOfCrossStreetLocationFormat {}
  implicit lazy val GeneratedCrossStreetLocationFormat: scalaxb.XMLFormat[generated.CrossStreetLocation] = new DefaultGeneratedCrossStreetLocationFormat {}
  implicit lazy val GeneratedGetCrossStreetAddressFormat: scalaxb.XMLFormat[generated.GetCrossStreetAddress] = new DefaultGeneratedGetCrossStreetAddressFormat {}
  implicit lazy val GeneratedGetCrossStreetAddressResponseFormat: scalaxb.XMLFormat[generated.GetCrossStreetAddressResponse] = new DefaultGeneratedGetCrossStreetAddressResponseFormat {}
  implicit lazy val GeneratedGetRouteTotalsFormat: scalaxb.XMLFormat[generated.GetRouteTotals] = new DefaultGeneratedGetRouteTotalsFormat {}
  implicit lazy val GeneratedArrayOfRouteStopFormat: scalaxb.XMLFormat[generated.ArrayOfRouteStop] = new DefaultGeneratedArrayOfRouteStopFormat {}
  implicit lazy val GeneratedRouteStopFormat: scalaxb.XMLFormat[generated.RouteStop] = new DefaultGeneratedRouteStopFormat {}
  implicit lazy val GeneratedPointFormat: scalaxb.XMLFormat[generated.Point] = new DefaultGeneratedPointFormat {}
  implicit lazy val GeneratedRouteOptionsFormat: scalaxb.XMLFormat[generated.RouteOptions] = new DefaultGeneratedRouteOptionsFormat {}
  implicit lazy val GeneratedRouteDetailsFormat: scalaxb.XMLFormat[generated.RouteDetails] = new DefaultGeneratedRouteDetailsFormat {}
  implicit lazy val GeneratedArrayOfStringFormat: scalaxb.XMLFormat[generated.ArrayOfString] = new DefaultGeneratedArrayOfStringFormat {}
  implicit lazy val GeneratedArrayOfPointFormat: scalaxb.XMLFormat[generated.ArrayOfPoint] = new DefaultGeneratedArrayOfPointFormat {}
  implicit lazy val GeneratedVehicleFormat: scalaxb.XMLFormat[generated.Vehicle] = new DefaultGeneratedVehicleFormat {}
  implicit lazy val GeneratedArrayOfRouteLineFormat: scalaxb.XMLFormat[generated.ArrayOfRouteLine] = new DefaultGeneratedArrayOfRouteLineFormat {}
  implicit lazy val GeneratedRouteLineFormat: scalaxb.XMLFormat[generated.RouteLine] = new DefaultGeneratedRouteLineFormat {}
  implicit lazy val GeneratedGetRouteTotalsResponseFormat: scalaxb.XMLFormat[generated.GetRouteTotalsResponse] = new DefaultGeneratedGetRouteTotalsResponseFormat {}
  implicit lazy val GeneratedRouteTotalsFormat: scalaxb.XMLFormat[generated.RouteTotals] = new DefaultGeneratedRouteTotalsFormat {}
  implicit lazy val GeneratedGetRouteTotalsBatchFormat: scalaxb.XMLFormat[generated.GetRouteTotalsBatch] = new DefaultGeneratedGetRouteTotalsBatchFormat {}
  implicit lazy val GeneratedArrayOfRouteArrayFormat: scalaxb.XMLFormat[generated.ArrayOfRouteArray] = new DefaultGeneratedArrayOfRouteArrayFormat {}
  implicit lazy val GeneratedRouteArrayFormat: scalaxb.XMLFormat[generated.RouteArray] = new DefaultGeneratedRouteArrayFormat {}
  implicit lazy val GeneratedGetRouteTotalsBatchResponseFormat: scalaxb.XMLFormat[generated.GetRouteTotalsBatchResponse] = new DefaultGeneratedGetRouteTotalsBatchResponseFormat {}
  implicit lazy val GeneratedArrayOfRouteTotalsFormat: scalaxb.XMLFormat[generated.ArrayOfRouteTotals] = new DefaultGeneratedArrayOfRouteTotalsFormat {}
  implicit lazy val GeneratedGetRouteWithAlternativesFormat: scalaxb.XMLFormat[generated.GetRouteWithAlternatives] = new DefaultGeneratedGetRouteWithAlternativesFormat {}
  implicit lazy val GeneratedGetRouteWithAlternativesResponseFormat: scalaxb.XMLFormat[generated.GetRouteWithAlternativesResponse] = new DefaultGeneratedGetRouteWithAlternativesResponseFormat {}
  implicit lazy val GeneratedAlternativeRouteInfoFormat: scalaxb.XMLFormat[generated.AlternativeRouteInfo] = new DefaultGeneratedAlternativeRouteInfoFormat {}
  implicit lazy val GeneratedRouteInfoFormat: scalaxb.XMLFormat[generated.RouteInfo] = new DefaultGeneratedRouteInfoFormat {}
  implicit lazy val GeneratedMapInfoFormat: scalaxb.XMLFormat[generated.MapInfo] = new DefaultGeneratedMapInfoFormat {}
  implicit lazy val GeneratedExtentFormat: scalaxb.XMLFormat[generated.Extent] = new DefaultGeneratedExtentFormat {}
  implicit lazy val GeneratedArrayOfSegmentDescriptionFormat: scalaxb.XMLFormat[generated.ArrayOfSegmentDescription] = new DefaultGeneratedArrayOfSegmentDescriptionFormat {}
  implicit lazy val GeneratedSegmentDescriptionFormat: scalaxb.XMLFormat[generated.SegmentDescription] = new DefaultGeneratedSegmentDescriptionFormat {}
  implicit lazy val GeneratedArrayOfPOIDetailsFormat: scalaxb.XMLFormat[generated.ArrayOfPOIDetails] = new DefaultGeneratedArrayOfPOIDetailsFormat {}
  implicit lazy val GeneratedPOIDetailsFormat: scalaxb.XMLFormat[generated.POIDetails] = new DefaultGeneratedPOIDetailsFormat {}
  implicit lazy val GeneratedCityFormat: scalaxb.XMLFormat[generated.City] = new DefaultGeneratedCityFormat {}
  implicit lazy val GeneratedTollFeeDetailsFormat: scalaxb.XMLFormat[generated.TollFeeDetails] = new DefaultGeneratedTollFeeDetailsFormat {}
  implicit lazy val GeneratedArrayOfRouteSummaryFormat: scalaxb.XMLFormat[generated.ArrayOfRouteSummary] = new DefaultGeneratedArrayOfRouteSummaryFormat {}
  implicit lazy val GeneratedRouteSummaryFormat: scalaxb.XMLFormat[generated.RouteSummary] = new DefaultGeneratedRouteSummaryFormat {}
  implicit lazy val GeneratedRoadTypeFormat: scalaxb.XMLFormat[generated.RoadType] = new DefaultGeneratedRoadTypeFormat {}
  implicit lazy val GeneratedArrayOfRouteInfoFormat: scalaxb.XMLFormat[generated.ArrayOfRouteInfo] = new DefaultGeneratedArrayOfRouteInfoFormat {}
  implicit lazy val GeneratedGetMultiRouteFormat: scalaxb.XMLFormat[generated.GetMultiRoute] = new DefaultGeneratedGetMultiRouteFormat {}
  implicit lazy val GeneratedArrayOfMultiRouteRequestFormat: scalaxb.XMLFormat[generated.ArrayOfMultiRouteRequest] = new DefaultGeneratedArrayOfMultiRouteRequestFormat {}
  implicit lazy val GeneratedMultiRouteRequestFormat: scalaxb.XMLFormat[generated.MultiRouteRequest] = new DefaultGeneratedMultiRouteRequestFormat {}
  implicit lazy val GeneratedGetMultiRouteResponseFormat: scalaxb.XMLFormat[generated.GetMultiRouteResponse] = new DefaultGeneratedGetMultiRouteResponseFormat {}
  implicit lazy val GeneratedMultiRouteFormat: scalaxb.XMLFormat[generated.MultiRoute] = new DefaultGeneratedMultiRouteFormat {}
  implicit lazy val GeneratedArrayOfSingleRouteTotalsFormat: scalaxb.XMLFormat[generated.ArrayOfSingleRouteTotals] = new DefaultGeneratedArrayOfSingleRouteTotalsFormat {}
  implicit lazy val GeneratedSingleRouteTotalsFormat: scalaxb.XMLFormat[generated.SingleRouteTotals] = new DefaultGeneratedSingleRouteTotalsFormat {}
  implicit lazy val GeneratedGetRouteFormat: scalaxb.XMLFormat[generated.GetRoute] = new DefaultGeneratedGetRouteFormat {}
  implicit lazy val GeneratedGetRouteResponseFormat: scalaxb.XMLFormat[generated.GetRouteResponse] = new DefaultGeneratedGetRouteResponseFormat {}
  implicit lazy val GeneratedGetRouteSummaryFormat: scalaxb.XMLFormat[generated.GetRouteSummary] = new DefaultGeneratedGetRouteSummaryFormat {}
  implicit lazy val GeneratedGetRouteSummaryResponseFormat: scalaxb.XMLFormat[generated.GetRouteSummaryResponse] = new DefaultGeneratedGetRouteSummaryResponseFormat {}
  implicit lazy val GeneratedGetRouteDescriptionFormat: scalaxb.XMLFormat[generated.GetRouteDescription] = new DefaultGeneratedGetRouteDescriptionFormat {}
  implicit lazy val GeneratedGetRouteDescriptionResponseFormat: scalaxb.XMLFormat[generated.GetRouteDescriptionResponse] = new DefaultGeneratedGetRouteDescriptionResponseFormat {}
  implicit lazy val GeneratedGetRouteWithMapFormat: scalaxb.XMLFormat[generated.GetRouteWithMap] = new DefaultGeneratedGetRouteWithMapFormat {}
  implicit lazy val GeneratedMapOptionsFormat: scalaxb.XMLFormat[generated.MapOptions] = new DefaultGeneratedMapOptionsFormat {}
  implicit lazy val GeneratedMapSizeFormat: scalaxb.XMLFormat[generated.MapSize] = new DefaultGeneratedMapSizeFormat {}
  implicit lazy val GeneratedGetRouteWithMapResponseFormat: scalaxb.XMLFormat[generated.GetRouteWithMapResponse] = new DefaultGeneratedGetRouteWithMapResponseFormat {}

  trait DefaultGeneratedFindPOIFormat extends scalaxb.ElemNameParser[generated.FindPOI] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.FindPOI] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "name")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "city")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "resultRange")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.FindPOI(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.City](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.ResultRange](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.FindPOI, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("name"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.City](__obj.city, Some("http://webservices.maplink2.com.br"), Some("city"), __scope, false),
        scalaxb.toXML[generated.ResultRange](__obj.resultRange, Some("http://webservices.maplink2.com.br"), Some("resultRange"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedResultRangeFormat extends scalaxb.ElemNameParser[generated.ResultRange] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ResultRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ResultRange] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "pageIndex")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "recordsPerPage")) ^^ {
        case p1 ~ p2 =>
          generated.ResultRange(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.ResultRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.pageIndex, Some("http://webservices.maplink2.com.br"), Some("pageIndex"), __scope, false),
        scalaxb.toXML[Int](__obj.recordsPerPage, Some("http://webservices.maplink2.com.br"), Some("recordsPerPage"), __scope, false))

  }

  trait DefaultGeneratedFindPOIResponseFormat extends scalaxb.ElemNameParser[generated.FindPOIResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.FindPOIResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "findPOIResult")) ^^ {
        case p1 =>
          generated.FindPOIResponse(scalaxb.fromXML[generated.POIInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.FindPOIResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.POIInfo](__obj.findPOIResult, Some("http://webservices.maplink2.com.br"), Some("findPOIResult"), __scope, false))

  }

  trait DefaultGeneratedPOIInfoFormat extends scalaxb.ElemNameParser[generated.POIInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("POIInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.POIInfo] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "recordCount")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "pageCount")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "poiLocations")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.POIInfo(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[generated.ArrayOfPOILocation](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.POIInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.recordCount, Some("http://webservices.maplink2.com.br"), Some("recordCount"), __scope, false),
        scalaxb.toXML[Int](__obj.pageCount, Some("http://webservices.maplink2.com.br"), Some("pageCount"), __scope, false),
        __obj.poiLocations map {
          scalaxb.toXML[generated.ArrayOfPOILocation](_, Some("http://webservices.maplink2.com.br"), Some("poiLocations"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfPOILocationFormat extends scalaxb.ElemNameParser[generated.ArrayOfPOILocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfPOILocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfPOILocation] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "POILocation")) ^^ {
        case p1 =>
          generated.ArrayOfPOILocation(p1.toSeq map {
            scalaxb.fromXML[generated.POILocation](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfPOILocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.POILocation flatMap {
        scalaxb.toXML[generated.POILocation](_, Some("http://webservices.maplink2.com.br"), Some("POILocation"), __scope, false)
      })

  }

  trait DefaultGeneratedPOILocationFormat extends scalaxb.ElemNameParser[generated.POILocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("POILocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.POILocation] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "name")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "district")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "carAccess")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "dataSource")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "city")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
          generated.POILocation(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.City](p5, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.Point](p6, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.POILocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("name"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.district map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("district"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Boolean](__obj.carAccess, Some("http://webservices.maplink2.com.br"), Some("carAccess"), __scope, false),
        __obj.dataSource map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("dataSource"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.City](__obj.city, Some("http://webservices.maplink2.com.br"), Some("city"), __scope, false),
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false))

  }

  trait DefaultGeneratedFindAddressFormat extends scalaxb.ElemNameParser[generated.FindAddress] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.FindAddress] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "address")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ao")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.FindAddress(scalaxb.fromXML[generated.Address](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.AddressOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.FindAddress, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Address](__obj.address, Some("http://webservices.maplink2.com.br"), Some("address"), __scope, false),
        scalaxb.toXML[generated.AddressOptions](__obj.ao, Some("http://webservices.maplink2.com.br"), Some("ao"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedAddressFormat extends scalaxb.ElemNameParser[generated.Address] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("Address")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Address] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "street")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "houseNumber")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "zip")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "district")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "city")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
          generated.Address(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.City](p5, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.Address, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.street map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("street"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.houseNumber map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("houseNumber"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.zip map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("zip"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.district map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("district"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.City](__obj.city, Some("http://webservices.maplink2.com.br"), Some("city"), __scope, false))

  }

  trait DefaultGeneratedAddressOptionsFormat extends scalaxb.ElemNameParser[generated.AddressOptions] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("AddressOptions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.AddressOptions] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "matchType")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "usePhonetic")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "searchType")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "resultRange")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.AddressOptions(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.ResultRange](p4, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.AddressOptions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.matchType, Some("http://webservices.maplink2.com.br"), Some("matchType"), __scope, false),
        scalaxb.toXML[Boolean](__obj.usePhonetic, Some("http://webservices.maplink2.com.br"), Some("usePhonetic"), __scope, false),
        scalaxb.toXML[Int](__obj.searchType, Some("http://webservices.maplink2.com.br"), Some("searchType"), __scope, false),
        scalaxb.toXML[generated.ResultRange](__obj.resultRange, Some("http://webservices.maplink2.com.br"), Some("resultRange"), __scope, false))

  }

  trait DefaultGeneratedFindAddressResponseFormat extends scalaxb.ElemNameParser[generated.FindAddressResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.FindAddressResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "findAddressResult")) ^^ {
        case p1 =>
          generated.FindAddressResponse(scalaxb.fromXML[generated.AddressInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.FindAddressResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.AddressInfo](__obj.findAddressResult, Some("http://webservices.maplink2.com.br"), Some("findAddressResult"), __scope, false))

  }

  trait DefaultGeneratedAddressInfoFormat extends scalaxb.ElemNameParser[generated.AddressInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("AddressInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.AddressInfo] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "recordCount")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "pageCount")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "addressLocation")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.AddressInfo(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[generated.ArrayOfAddressLocation](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.AddressInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.recordCount, Some("http://webservices.maplink2.com.br"), Some("recordCount"), __scope, false),
        scalaxb.toXML[Int](__obj.pageCount, Some("http://webservices.maplink2.com.br"), Some("pageCount"), __scope, false),
        __obj.addressLocation map {
          scalaxb.toXML[generated.ArrayOfAddressLocation](_, Some("http://webservices.maplink2.com.br"), Some("addressLocation"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfAddressLocationFormat extends scalaxb.ElemNameParser[generated.ArrayOfAddressLocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfAddressLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfAddressLocation] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "AddressLocation")) ^^ {
        case p1 =>
          generated.ArrayOfAddressLocation(p1.toSeq map {
            scalaxb.fromXML[generated.AddressLocation](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfAddressLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.AddressLocation flatMap {
        scalaxb.toXML[generated.AddressLocation](_, Some("http://webservices.maplink2.com.br"), Some("AddressLocation"), __scope, false)
      })

  }

  trait DefaultGeneratedAddressLocationFormat extends scalaxb.ElemNameParser[generated.AddressLocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("AddressLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.AddressLocation] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "key")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "address")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "zipL")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "zipR")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "carAccess")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "dataSource")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
          generated.AddressLocation(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.Address](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack),
            p6.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.Point](p7, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.AddressLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.key map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("key"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.Address](__obj.address, Some("http://webservices.maplink2.com.br"), Some("address"), __scope, false),
        __obj.zipL map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("zipL"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.zipR map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("zipR"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Boolean](__obj.carAccess, Some("http://webservices.maplink2.com.br"), Some("carAccess"), __scope, false),
        __obj.dataSource map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("dataSource"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false))

  }

  trait DefaultGeneratedGetAddressFormat extends scalaxb.ElemNameParser[generated.GetAddress] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetAddress] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "tolerance")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetAddress(scalaxb.fromXML[generated.Point](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetAddress, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Double](__obj.tolerance, Some("http://webservices.maplink2.com.br"), Some("tolerance"), __scope, false))

  }

  trait DefaultGeneratedGetAddressResponseFormat extends scalaxb.ElemNameParser[generated.GetAddressResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetAddressResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getAddressResult")) ^^ {
        case p1 =>
          generated.GetAddressResponse(scalaxb.fromXML[generated.AddressLocation](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetAddressResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.AddressLocation](__obj.getAddressResult, Some("http://webservices.maplink2.com.br"), Some("getAddressResult"), __scope, false))

  }

  trait DefaultGeneratedGetXYFormat extends scalaxb.ElemNameParser[generated.GetXY] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetXY] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "address")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 =>
          generated.GetXY(scalaxb.fromXML[generated.Address](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetXY, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Address](__obj.address, Some("http://webservices.maplink2.com.br"), Some("address"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetXYResponseFormat extends scalaxb.ElemNameParser[generated.GetXYResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetXYResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getXYResult")) ^^ {
        case p1 =>
          generated.GetXYResponse(scalaxb.fromXML[generated.Point](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetXYResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.Point](__obj.getXYResult, Some("http://webservices.maplink2.com.br"), Some("getXYResult"), __scope, false))

  }

  trait DefaultGeneratedGetXYRadiusWithMapFormat extends scalaxb.ElemNameParser[generated.GetXYRadiusWithMap] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetXYRadiusWithMap] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "address")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "mo")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "radius")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.GetXYRadiusWithMap(scalaxb.fromXML[generated.Address](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.MapOptions](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetXYRadiusWithMap, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Address](__obj.address, Some("http://webservices.maplink2.com.br"), Some("address"), __scope, false),
        scalaxb.toXML[generated.MapOptions](__obj.mo, Some("http://webservices.maplink2.com.br"), Some("mo"), __scope, false),
        scalaxb.toXML[Int](__obj.radius, Some("http://webservices.maplink2.com.br"), Some("radius"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetXYRadiusWithMapResponseFormat extends scalaxb.ElemNameParser[generated.GetXYRadiusWithMapResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetXYRadiusWithMapResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getXYRadiusWithMapResult")) ^^ {
        case p1 =>
          generated.GetXYRadiusWithMapResponse(scalaxb.fromXML[generated.MapInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetXYRadiusWithMapResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.MapInfo](__obj.getXYRadiusWithMapResult, Some("http://webservices.maplink2.com.br"), Some("getXYRadiusWithMapResult"), __scope, false))

  }

  trait DefaultGeneratedFindCityFormat extends scalaxb.ElemNameParser[generated.FindCity] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.FindCity] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "cidade")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ao")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.FindCity(scalaxb.fromXML[generated.City](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.AddressOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.FindCity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.City](__obj.cidade, Some("http://webservices.maplink2.com.br"), Some("cidade"), __scope, false),
        scalaxb.toXML[generated.AddressOptions](__obj.ao, Some("http://webservices.maplink2.com.br"), Some("ao"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedFindCityResponseFormat extends scalaxb.ElemNameParser[generated.FindCityResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.FindCityResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "findCityResult")) ^^ {
        case p1 =>
          generated.FindCityResponse(scalaxb.fromXML[generated.CityLocationInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.FindCityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.CityLocationInfo](__obj.findCityResult, Some("http://webservices.maplink2.com.br"), Some("findCityResult"), __scope, false))

  }

  trait DefaultGeneratedCityLocationInfoFormat extends scalaxb.ElemNameParser[generated.CityLocationInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("CityLocationInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.CityLocationInfo] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "recordCount")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "pageCount")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "cityLocation")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.CityLocationInfo(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[generated.ArrayOfCityLocation](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.CityLocationInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.recordCount, Some("http://webservices.maplink2.com.br"), Some("recordCount"), __scope, false),
        scalaxb.toXML[Int](__obj.pageCount, Some("http://webservices.maplink2.com.br"), Some("pageCount"), __scope, false),
        __obj.cityLocation map {
          scalaxb.toXML[generated.ArrayOfCityLocation](_, Some("http://webservices.maplink2.com.br"), Some("cityLocation"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfCityLocationFormat extends scalaxb.ElemNameParser[generated.ArrayOfCityLocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfCityLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfCityLocation] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "CityLocation")) ^^ {
        case p1 =>
          generated.ArrayOfCityLocation(p1.toSeq map {
            scalaxb.fromXML[generated.CityLocation](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfCityLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CityLocation flatMap {
        scalaxb.toXML[generated.CityLocation](_, Some("http://webservices.maplink2.com.br"), Some("CityLocation"), __scope, false)
      })

  }

  trait DefaultGeneratedCityLocationFormat extends scalaxb.ElemNameParser[generated.CityLocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("CityLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.CityLocation] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "city")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "carAccess")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "zipRangeStart")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "zipRangeEnd")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "capital")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
          generated.CityLocation(scalaxb.fromXML[generated.City](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.Point](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p5.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Boolean](p6, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.CityLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.City](__obj.city, Some("http://webservices.maplink2.com.br"), Some("city"), __scope, false),
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false),
        scalaxb.toXML[Boolean](__obj.carAccess, Some("http://webservices.maplink2.com.br"), Some("carAccess"), __scope, false),
        __obj.zipRangeStart map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("zipRangeStart"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.zipRangeEnd map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("zipRangeEnd"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Boolean](__obj.capital, Some("http://webservices.maplink2.com.br"), Some("capital"), __scope, false))

  }

  trait DefaultGeneratedGetCrossStreetXYFormat extends scalaxb.ElemNameParser[generated.GetCrossStreetXY] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetCrossStreetXY] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "cidade")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "firstStreet")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "secondStreet")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.GetCrossStreetXY(scalaxb.fromXML[generated.City](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetCrossStreetXY, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.City](__obj.cidade, Some("http://webservices.maplink2.com.br"), Some("cidade"), __scope, false),
        __obj.firstStreet map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("firstStreet"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.secondStreet map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("secondStreet"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetCrossStreetXYResponseFormat extends scalaxb.ElemNameParser[generated.GetCrossStreetXYResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetCrossStreetXYResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "GetCrossStreetXYResult")) ^^ {
        case p1 =>
          generated.GetCrossStreetXYResponse(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfCrossStreetLocation](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: generated.GetCrossStreetXYResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetCrossStreetXYResult map {
        scalaxb.toXML[generated.ArrayOfCrossStreetLocation](_, Some("http://webservices.maplink2.com.br"), Some("GetCrossStreetXYResult"), __scope, false)
      } getOrElse {
        Nil
      })

  }

  trait DefaultGeneratedArrayOfCrossStreetLocationFormat extends scalaxb.ElemNameParser[generated.ArrayOfCrossStreetLocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfCrossStreetLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfCrossStreetLocation] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "CrossStreetLocation")) ^^ {
        case p1 =>
          generated.ArrayOfCrossStreetLocation(p1.toSeq map {
            _.nilOption map {
              scalaxb.fromXML[generated.CrossStreetLocation](_, scalaxb.ElemName(node) :: stack)
            }
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfCrossStreetLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CrossStreetLocation flatMap {
        scalaxb.toXML[Option[generated.CrossStreetLocation]](_, Some("http://webservices.maplink2.com.br"), Some("CrossStreetLocation"), __scope, false)
      })

  }

  trait DefaultGeneratedCrossStreetLocationFormat extends scalaxb.ElemNameParser[generated.CrossStreetLocation] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("CrossStreetLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.CrossStreetLocation] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "city")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "crossStreet")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "district")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "street")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "zip")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
          generated.CrossStreetLocation(scalaxb.fromXML[generated.City](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.Point](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p5.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p6.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.CrossStreetLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.City](__obj.city, Some("http://webservices.maplink2.com.br"), Some("city"), __scope, false),
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false),
        __obj.crossStreet map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("crossStreet"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.district map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("district"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.street map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("street"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.zip map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("zip"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetCrossStreetAddressFormat extends scalaxb.ElemNameParser[generated.GetCrossStreetAddress] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetCrossStreetAddress] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 =>
          generated.GetCrossStreetAddress(scalaxb.fromXML[generated.Point](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetCrossStreetAddress, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetCrossStreetAddressResponseFormat extends scalaxb.ElemNameParser[generated.GetCrossStreetAddressResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetCrossStreetAddressResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "GetCrossStreetAddressResult")) ^^ {
        case p1 =>
          generated.GetCrossStreetAddressResponse(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfAddressLocation](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: generated.GetCrossStreetAddressResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetCrossStreetAddressResult map {
        scalaxb.toXML[generated.ArrayOfAddressLocation](_, Some("http://webservices.maplink2.com.br"), Some("GetCrossStreetAddressResult"), __scope, false)
      } getOrElse {
        Nil
      })

  }


  trait AddressFinderSoap12Bindings {
    this: scalaxb.SoapClients =>
    lazy val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")
    lazy val service: generated.AddressFinderSoap = new AddressFinderSoap12Binding {}

    def baseAddress = new java.net.URI("http://services.maplink.com.br/webservices/v3/AddressFinder/AddressFinder.asmx")

    trait AddressFinderSoap12Binding extends generated.AddressFinderSoap {
      def findPOI(name: Option[String], city: generated.City, resultRange: generated.ResultRange, token: Option[String]): Either[scalaxb.Fault[Any], generated.POIInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.FindPOI(name, city, resultRange, token), Some("http://webservices.maplink2.com.br"), "findPOI", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/findPOI"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.FindPOIResponse](body.headOption getOrElse {
              body
            }).findPOIResult)
        }

      def findAddress(address: generated.Address, ao: generated.AddressOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.AddressInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.FindAddress(address, ao, token), Some("http://webservices.maplink2.com.br"), "findAddress", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/findAddress"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.FindAddressResponse](body.headOption getOrElse {
              body
            }).findAddressResult)
        }

      def getAddress(point: generated.Point, token: Option[String], tolerance: Double): Either[scalaxb.Fault[Any], generated.AddressLocation] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetAddress(point, token, tolerance), Some("http://webservices.maplink2.com.br"), "getAddress", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getAddress"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetAddressResponse](body.headOption getOrElse {
              body
            }).getAddressResult)
        }

      def getXY(address: generated.Address, token: Option[String]): Either[scalaxb.Fault[Any], generated.Point] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetXY(address, token), Some("http://webservices.maplink2.com.br"), "getXY", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getXY"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetXYResponse](body.headOption getOrElse {
              body
            }).getXYResult)
        }

      def getXYRadiusWithMap(address: generated.Address, mo: generated.MapOptions, radius: Int, token: Option[String]): Either[scalaxb.Fault[Any], generated.MapInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetXYRadiusWithMap(address, mo, radius, token), Some("http://webservices.maplink2.com.br"), "getXYRadiusWithMap", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getXYRadiusWithMap"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetXYRadiusWithMapResponse](body.headOption getOrElse {
              body
            }).getXYRadiusWithMapResult)
        }

      def findCity(cidade: generated.City, ao: generated.AddressOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.CityLocationInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.FindCity(cidade, ao, token), Some("http://webservices.maplink2.com.br"), "findCity", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/findCity"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.FindCityResponse](body.headOption getOrElse {
              body
            }).findCityResult)
        }

      def getCrossStreetXY(cidade: generated.City, firstStreet: Option[String], secondStreet: Option[String], token: Option[String]): Either[scalaxb.Fault[Any], generated.GetCrossStreetXYResponse] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetCrossStreetXY(cidade, firstStreet, secondStreet, token), Some("http://webservices.maplink2.com.br"), "GetCrossStreetXY", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/GetCrossStreetXY"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetCrossStreetXYResponse](body.headOption getOrElse {
              body
            }))
        }

      def getCrossStreetAddress(point: generated.Point, token: Option[String]): Either[scalaxb.Fault[Any], generated.GetCrossStreetAddressResponse] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetCrossStreetAddress(point, token), Some("http://webservices.maplink2.com.br"), "GetCrossStreetAddress", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/GetCrossStreetAddress"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetCrossStreetAddressResponse](body.headOption getOrElse {
              body
            }))
        }
    }

  }


  trait DefaultGeneratedGetRouteTotalsFormat extends scalaxb.ElemNameParser[generated.GetRouteTotals] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteTotals] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "rs")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetRouteTotals(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteStop](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRouteTotals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rs map {
        scalaxb.toXML[generated.ArrayOfRouteStop](_, Some("http://webservices.maplink2.com.br"), Some("rs"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfRouteStopFormat extends scalaxb.ElemNameParser[generated.ArrayOfRouteStop] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfRouteStop")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfRouteStop] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RouteStop")) ^^ {
        case p1 =>
          generated.ArrayOfRouteStop(p1.toSeq map {
            scalaxb.fromXML[generated.RouteStop](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfRouteStop, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RouteStop flatMap {
        scalaxb.toXML[generated.RouteStop](_, Some("http://webservices.maplink2.com.br"), Some("RouteStop"), __scope, false)
      })

  }

  trait DefaultGeneratedRouteStopFormat extends scalaxb.ElemNameParser[generated.RouteStop] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteStop")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteStop] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "description")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ^^ {
        case p1 ~ p2 =>
          generated.RouteStop(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.Point](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RouteStop, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.description map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("description"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false))

  }

  trait DefaultGeneratedPointFormat extends scalaxb.ElemNameParser[generated.Point] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("Point")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Point] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "x")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "y")) ^^ {
        case p1 ~ p2 =>
          generated.Point(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.Point, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.x, Some("http://webservices.maplink2.com.br"), Some("x"), __scope, false),
        scalaxb.toXML[Double](__obj.y, Some("http://webservices.maplink2.com.br"), Some("y"), __scope, false))

  }

  trait DefaultGeneratedRouteOptionsFormat extends scalaxb.ElemNameParser[generated.RouteOptions] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteOptions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteOptions] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "language")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeDetails")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "vehicle")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeLine")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.RouteOptions(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteDetails](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.Vehicle](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[generated.ArrayOfRouteLine](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.RouteOptions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.language map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("language"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteDetails](__obj.routeDetails, Some("http://webservices.maplink2.com.br"), Some("routeDetails"), __scope, false),
        scalaxb.toXML[generated.Vehicle](__obj.vehicle, Some("http://webservices.maplink2.com.br"), Some("vehicle"), __scope, false),
        __obj.routeLine map {
          scalaxb.toXML[generated.ArrayOfRouteLine](_, Some("http://webservices.maplink2.com.br"), Some("routeLine"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedRouteDetailsFormat extends scalaxb.ElemNameParser[generated.RouteDetails] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteDetails")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteDetails] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "descriptionType")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeType")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "optimizeRoute")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "poiRoute")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "barriersList")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "barrierPoints")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
          generated.RouteDetails(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[generated.ArrayOfString](_, scalaxb.ElemName(node) :: stack)
            },
            p5.headOption map {
              scalaxb.fromXML[generated.ArrayOfString](_, scalaxb.ElemName(node) :: stack)
            },
            p6.headOption map {
              scalaxb.fromXML[generated.ArrayOfPoint](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.RouteDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.descriptionType, Some("http://webservices.maplink2.com.br"), Some("descriptionType"), __scope, false),
        scalaxb.toXML[Int](__obj.routeType, Some("http://webservices.maplink2.com.br"), Some("routeType"), __scope, false),
        scalaxb.toXML[Boolean](__obj.optimizeRoute, Some("http://webservices.maplink2.com.br"), Some("optimizeRoute"), __scope, false),
        __obj.poiRoute map {
          scalaxb.toXML[generated.ArrayOfString](_, Some("http://webservices.maplink2.com.br"), Some("poiRoute"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.barriersList map {
          scalaxb.toXML[generated.ArrayOfString](_, Some("http://webservices.maplink2.com.br"), Some("barriersList"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.barrierPoints map {
          scalaxb.toXML[generated.ArrayOfPoint](_, Some("http://webservices.maplink2.com.br"), Some("barrierPoints"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfStringFormat extends scalaxb.ElemNameParser[generated.ArrayOfString] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfString] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "string")) ^^ {
        case p1 =>
          generated.ArrayOfString(p1.toSeq map {
            _.nilOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            }
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string flatMap {
        scalaxb.toXML[Option[String]](_, Some("http://webservices.maplink2.com.br"), Some("string"), __scope, false)
      })

  }

  trait DefaultGeneratedArrayOfPointFormat extends scalaxb.ElemNameParser[generated.ArrayOfPoint] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfPoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfPoint] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "Point")) ^^ {
        case p1 =>
          generated.ArrayOfPoint(p1.toSeq map {
            scalaxb.fromXML[generated.Point](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfPoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Point flatMap {
        scalaxb.toXML[generated.Point](_, Some("http://webservices.maplink2.com.br"), Some("Point"), __scope, false)
      })

  }

  trait DefaultGeneratedVehicleFormat extends scalaxb.ElemNameParser[generated.Vehicle] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("Vehicle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Vehicle] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "tankCapacity")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "averageConsumption")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "fuelPrice")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "averageSpeed")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "tollFeeCat")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
          generated.Vehicle(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.Vehicle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.tankCapacity, Some("http://webservices.maplink2.com.br"), Some("tankCapacity"), __scope, false),
        scalaxb.toXML[Float](__obj.averageConsumption, Some("http://webservices.maplink2.com.br"), Some("averageConsumption"), __scope, false),
        scalaxb.toXML[Double](__obj.fuelPrice, Some("http://webservices.maplink2.com.br"), Some("fuelPrice"), __scope, false),
        scalaxb.toXML[Int](__obj.averageSpeed, Some("http://webservices.maplink2.com.br"), Some("averageSpeed"), __scope, false),
        scalaxb.toXML[Int](__obj.tollFeeCat, Some("http://webservices.maplink2.com.br"), Some("tollFeeCat"), __scope, false))

  }

  trait DefaultGeneratedArrayOfRouteLineFormat extends scalaxb.ElemNameParser[generated.ArrayOfRouteLine] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfRouteLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfRouteLine] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RouteLine")) ^^ {
        case p1 =>
          generated.ArrayOfRouteLine(p1.toSeq map {
            scalaxb.fromXML[generated.RouteLine](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfRouteLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RouteLine flatMap {
        scalaxb.toXML[generated.RouteLine](_, Some("http://webservices.maplink2.com.br"), Some("RouteLine"), __scope, false)
      })

  }

  trait DefaultGeneratedRouteLineFormat extends scalaxb.ElemNameParser[generated.RouteLine] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteLine] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "width")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RGB")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "transparency")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.RouteLine(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RouteLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.width, Some("http://webservices.maplink2.com.br"), Some("width"), __scope, false),
        __obj.RGB map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("RGB"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Double](__obj.transparency, Some("http://webservices.maplink2.com.br"), Some("transparency"), __scope, false))

  }

  trait DefaultGeneratedGetRouteTotalsResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteTotalsResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteTotalsResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getRouteTotalsResult")) ^^ {
        case p1 =>
          generated.GetRouteTotalsResponse(scalaxb.fromXML[generated.RouteTotals](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetRouteTotalsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.RouteTotals](__obj.getRouteTotalsResult, Some("http://webservices.maplink2.com.br"), Some("getRouteTotalsResult"), __scope, false))

  }

  trait DefaultGeneratedRouteTotalsFormat extends scalaxb.ElemNameParser[generated.RouteTotals] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteTotals")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteTotals] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "totalDistance")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "totalTime")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "totalFuelUsed")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "totaltollFeeCost")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "totalfuelCost")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "totalCost")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "taxiFare1")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "taxiFare2")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
          generated.RouteTotals(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p4, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p5, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p6, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p7, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p8, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RouteTotals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.totalDistance, Some("http://webservices.maplink2.com.br"), Some("totalDistance"), __scope, false),
        __obj.totalTime map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("totalTime"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Double](__obj.totalFuelUsed, Some("http://webservices.maplink2.com.br"), Some("totalFuelUsed"), __scope, false),
        scalaxb.toXML[Double](__obj.totaltollFeeCost, Some("http://webservices.maplink2.com.br"), Some("totaltollFeeCost"), __scope, false),
        scalaxb.toXML[Double](__obj.totalfuelCost, Some("http://webservices.maplink2.com.br"), Some("totalfuelCost"), __scope, false),
        scalaxb.toXML[Double](__obj.totalCost, Some("http://webservices.maplink2.com.br"), Some("totalCost"), __scope, false),
        scalaxb.toXML[Double](__obj.taxiFare1, Some("http://webservices.maplink2.com.br"), Some("taxiFare1"), __scope, false),
        scalaxb.toXML[Double](__obj.taxiFare2, Some("http://webservices.maplink2.com.br"), Some("taxiFare2"), __scope, false))

  }

  trait DefaultGeneratedGetRouteTotalsBatchFormat extends scalaxb.ElemNameParser[generated.GetRouteTotalsBatch] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteTotalsBatch] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ra")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetRouteTotalsBatch(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteArray](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRouteTotalsBatch, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ra map {
        scalaxb.toXML[generated.ArrayOfRouteArray](_, Some("http://webservices.maplink2.com.br"), Some("ra"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfRouteArrayFormat extends scalaxb.ElemNameParser[generated.ArrayOfRouteArray] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfRouteArray")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfRouteArray] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RouteArray")) ^^ {
        case p1 =>
          generated.ArrayOfRouteArray(p1.toSeq map {
            scalaxb.fromXML[generated.RouteArray](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfRouteArray, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RouteArray flatMap {
        scalaxb.toXML[generated.RouteArray](_, Some("http://webservices.maplink2.com.br"), Some("RouteArray"), __scope, false)
      })

  }

  trait DefaultGeneratedRouteArrayFormat extends scalaxb.ElemNameParser[generated.RouteArray] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteArray")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteArray] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "Origin")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "Dest")) ^^ {
        case p1 ~ p2 =>
          generated.RouteArray(scalaxb.fromXML[generated.RouteStop](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.RouteStop](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RouteArray, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.RouteStop](__obj.Origin, Some("http://webservices.maplink2.com.br"), Some("Origin"), __scope, false),
        scalaxb.toXML[generated.RouteStop](__obj.Dest, Some("http://webservices.maplink2.com.br"), Some("Dest"), __scope, false))

  }

  trait DefaultGeneratedGetRouteTotalsBatchResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteTotalsBatchResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteTotalsBatchResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "GetRouteTotalsBatchResult")) ^^ {
        case p1 =>
          generated.GetRouteTotalsBatchResponse(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteTotals](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: generated.GetRouteTotalsBatchResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetRouteTotalsBatchResult map {
        scalaxb.toXML[generated.ArrayOfRouteTotals](_, Some("http://webservices.maplink2.com.br"), Some("GetRouteTotalsBatchResult"), __scope, false)
      } getOrElse {
        Nil
      })

  }

  trait DefaultGeneratedArrayOfRouteTotalsFormat extends scalaxb.ElemNameParser[generated.ArrayOfRouteTotals] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfRouteTotals")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfRouteTotals] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RouteTotals")) ^^ {
        case p1 =>
          generated.ArrayOfRouteTotals(p1.toSeq map {
            scalaxb.fromXML[generated.RouteTotals](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfRouteTotals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RouteTotals flatMap {
        scalaxb.toXML[generated.RouteTotals](_, Some("http://webservices.maplink2.com.br"), Some("RouteTotals"), __scope, false)
      })

  }

  trait DefaultGeneratedGetRouteWithAlternativesFormat extends scalaxb.ElemNameParser[generated.GetRouteWithAlternatives] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteWithAlternatives] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "rs")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetRouteWithAlternatives(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteStop](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRouteWithAlternatives, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rs map {
        scalaxb.toXML[generated.ArrayOfRouteStop](_, Some("http://webservices.maplink2.com.br"), Some("rs"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetRouteWithAlternativesResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteWithAlternativesResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteWithAlternativesResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getRouteWithAlternativesResult")) ^^ {
        case p1 =>
          generated.GetRouteWithAlternativesResponse(scalaxb.fromXML[generated.AlternativeRouteInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetRouteWithAlternativesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.AlternativeRouteInfo](__obj.getRouteWithAlternativesResult, Some("http://webservices.maplink2.com.br"), Some("getRouteWithAlternativesResult"), __scope, false))

  }

  trait DefaultGeneratedAlternativeRouteInfoFormat extends scalaxb.ElemNameParser[generated.AlternativeRouteInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("AlternativeRouteInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.AlternativeRouteInfo] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "mainRoute")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "alternatives")) ^^ {
        case p1 ~ p2 =>
          generated.AlternativeRouteInfo(scalaxb.fromXML[generated.RouteInfo](p1, scalaxb.ElemName(node) :: stack),
            p2.headOption map {
              scalaxb.fromXML[generated.ArrayOfRouteInfo](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.AlternativeRouteInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.RouteInfo](__obj.mainRoute, Some("http://webservices.maplink2.com.br"), Some("mainRoute"), __scope, false),
        __obj.alternatives map {
          scalaxb.toXML[generated.ArrayOfRouteInfo](_, Some("http://webservices.maplink2.com.br"), Some("alternatives"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedRouteInfoFormat extends scalaxb.ElemNameParser[generated.RouteInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteInfo] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeId")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "MapInfo")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "segDescription")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeTotals")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeSummary")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "roadType")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
          generated.RouteInfo(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.MapInfo](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[generated.ArrayOfSegmentDescription](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.RouteTotals](p4, scalaxb.ElemName(node) :: stack),
            p5.headOption map {
              scalaxb.fromXML[generated.ArrayOfRouteSummary](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.RoadType](p6, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RouteInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.routeId map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("routeId"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.MapInfo](__obj.MapInfo, Some("http://webservices.maplink2.com.br"), Some("MapInfo"), __scope, false),
        __obj.segDescription map {
          scalaxb.toXML[generated.ArrayOfSegmentDescription](_, Some("http://webservices.maplink2.com.br"), Some("segDescription"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.RouteTotals](__obj.routeTotals, Some("http://webservices.maplink2.com.br"), Some("routeTotals"), __scope, false),
        __obj.routeSummary map {
          scalaxb.toXML[generated.ArrayOfRouteSummary](_, Some("http://webservices.maplink2.com.br"), Some("routeSummary"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.RoadType](__obj.roadType, Some("http://webservices.maplink2.com.br"), Some("roadType"), __scope, false))

  }

  trait DefaultGeneratedMapInfoFormat extends scalaxb.ElemNameParser[generated.MapInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("MapInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.MapInfo] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "url")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "extent")) ^^ {
        case p1 ~ p2 =>
          generated.MapInfo(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.Extent](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.MapInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.url map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("url"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.Extent](__obj.extent, Some("http://webservices.maplink2.com.br"), Some("extent"), __scope, false))

  }

  trait DefaultGeneratedExtentFormat extends scalaxb.ElemNameParser[generated.Extent] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("Extent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Extent] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "XMin")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "YMin")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "XMax")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "YMax")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.Extent(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p4, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.Extent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.XMin, Some("http://webservices.maplink2.com.br"), Some("XMin"), __scope, false),
        scalaxb.toXML[Double](__obj.YMin, Some("http://webservices.maplink2.com.br"), Some("YMin"), __scope, false),
        scalaxb.toXML[Double](__obj.XMax, Some("http://webservices.maplink2.com.br"), Some("XMax"), __scope, false),
        scalaxb.toXML[Double](__obj.YMax, Some("http://webservices.maplink2.com.br"), Some("YMax"), __scope, false))

  }

  trait DefaultGeneratedArrayOfSegmentDescriptionFormat extends scalaxb.ElemNameParser[generated.ArrayOfSegmentDescription] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfSegmentDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfSegmentDescription] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "SegmentDescription")) ^^ {
        case p1 =>
          generated.ArrayOfSegmentDescription(p1.toSeq map {
            scalaxb.fromXML[generated.SegmentDescription](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfSegmentDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SegmentDescription flatMap {
        scalaxb.toXML[generated.SegmentDescription](_, Some("http://webservices.maplink2.com.br"), Some("SegmentDescription"), __scope, false)
      })

  }

  trait DefaultGeneratedSegmentDescriptionFormat extends scalaxb.ElemNameParser[generated.SegmentDescription] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("SegmentDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.SegmentDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "command")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "description")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "poiRoute")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "poiRouteDetails")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "city")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "tollFee")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "tollFeeDetails")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "roadType")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "distance")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "cumulativeDistance")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
          generated.SegmentDescription(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[generated.ArrayOfPOIDetails](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.City](p5, scalaxb.ElemName(node) :: stack),
            p6.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.TollFeeDetails](p7, scalaxb.ElemName(node) :: stack),
            p8.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Double](p9, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p10, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.Point](p11, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.SegmentDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.command map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("command"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.description map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("description"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.poiRoute map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("poiRoute"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.poiRouteDetails map {
          scalaxb.toXML[generated.ArrayOfPOIDetails](_, Some("http://webservices.maplink2.com.br"), Some("poiRouteDetails"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.City](__obj.city, Some("http://webservices.maplink2.com.br"), Some("city"), __scope, false),
        __obj.tollFee map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("tollFee"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.TollFeeDetails](__obj.tollFeeDetails, Some("http://webservices.maplink2.com.br"), Some("tollFeeDetails"), __scope, false),
        __obj.roadType map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("roadType"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Double](__obj.distance, Some("http://webservices.maplink2.com.br"), Some("distance"), __scope, false),
        scalaxb.toXML[Double](__obj.cumulativeDistance, Some("http://webservices.maplink2.com.br"), Some("cumulativeDistance"), __scope, false),
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false))

  }

  trait DefaultGeneratedArrayOfPOIDetailsFormat extends scalaxb.ElemNameParser[generated.ArrayOfPOIDetails] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfPOIDetails")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfPOIDetails] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "POIDetails")) ^^ {
        case p1 =>
          generated.ArrayOfPOIDetails(p1.toSeq map {
            scalaxb.fromXML[generated.POIDetails](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfPOIDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.POIDetails flatMap {
        scalaxb.toXML[generated.POIDetails](_, Some("http://webservices.maplink2.com.br"), Some("POIDetails"), __scope, false)
      })

  }

  trait DefaultGeneratedPOIDetailsFormat extends scalaxb.ElemNameParser[generated.POIDetails] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("POIDetails")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.POIDetails] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "clientID")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "name")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "addressInfo")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "source")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
          generated.POIDetails(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.Point](p5, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.POIDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.clientID map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("clientID"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.name map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("name"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.addressInfo map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("addressInfo"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.source map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("source"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false))

  }

  trait DefaultGeneratedCityFormat extends scalaxb.ElemNameParser[generated.City] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("City")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.City] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "name")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "state")) ^^ {
        case p1 ~ p2 =>
          generated.City(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.City, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("name"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.state map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("state"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedTollFeeDetailsFormat extends scalaxb.ElemNameParser[generated.TollFeeDetails] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("TollFeeDetails")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.TollFeeDetails] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "name")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "direction")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "address")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "concession")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "phone")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "state")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "price")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "pricePerAxle")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
          generated.TollFeeDetails(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            p2.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p5.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            p6.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[Double](p7, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p8, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.TollFeeDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("name"), __scope, false)
      } getOrElse {
        Nil
      },
        __obj.direction map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("direction"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.address map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("address"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.concession map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("concession"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.phone map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("phone"), __scope, false)
        } getOrElse {
          Nil
        },
        __obj.state map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("state"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[Double](__obj.price, Some("http://webservices.maplink2.com.br"), Some("price"), __scope, false),
        scalaxb.toXML[Double](__obj.pricePerAxle, Some("http://webservices.maplink2.com.br"), Some("pricePerAxle"), __scope, false))

  }

  trait DefaultGeneratedArrayOfRouteSummaryFormat extends scalaxb.ElemNameParser[generated.ArrayOfRouteSummary] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfRouteSummary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfRouteSummary] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RouteSummary")) ^^ {
        case p1 =>
          generated.ArrayOfRouteSummary(p1.toSeq map {
            scalaxb.fromXML[generated.RouteSummary](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfRouteSummary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RouteSummary flatMap {
        scalaxb.toXML[generated.RouteSummary](_, Some("http://webservices.maplink2.com.br"), Some("RouteSummary"), __scope, false)
      })

  }

  trait DefaultGeneratedRouteSummaryFormat extends scalaxb.ElemNameParser[generated.RouteSummary] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RouteSummary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RouteSummary] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "description")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "distance")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "point")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.RouteSummary(p1.headOption map {
            scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.Point](p3, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RouteSummary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.description map {
        scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("description"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[Double](__obj.distance, Some("http://webservices.maplink2.com.br"), Some("distance"), __scope, false),
        scalaxb.toXML[generated.Point](__obj.point, Some("http://webservices.maplink2.com.br"), Some("point"), __scope, false))

  }

  trait DefaultGeneratedRoadTypeFormat extends scalaxb.ElemNameParser[generated.RoadType] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("RoadType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.RoadType] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "twoLaneHighway")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "secondLaneUnderConstruction")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "oneLaneRoadway")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "pavingWorkInProgress")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "dirtRoad")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "roadwayInPoorConditions")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ferry")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
          generated.RoadType(scalaxb.fromXML[Double](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p3, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p4, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p5, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p6, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Double](p7, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.RoadType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Double](__obj.twoLaneHighway, Some("http://webservices.maplink2.com.br"), Some("twoLaneHighway"), __scope, false),
        scalaxb.toXML[Double](__obj.secondLaneUnderConstruction, Some("http://webservices.maplink2.com.br"), Some("secondLaneUnderConstruction"), __scope, false),
        scalaxb.toXML[Double](__obj.oneLaneRoadway, Some("http://webservices.maplink2.com.br"), Some("oneLaneRoadway"), __scope, false),
        scalaxb.toXML[Double](__obj.pavingWorkInProgress, Some("http://webservices.maplink2.com.br"), Some("pavingWorkInProgress"), __scope, false),
        scalaxb.toXML[Double](__obj.dirtRoad, Some("http://webservices.maplink2.com.br"), Some("dirtRoad"), __scope, false),
        scalaxb.toXML[Double](__obj.roadwayInPoorConditions, Some("http://webservices.maplink2.com.br"), Some("roadwayInPoorConditions"), __scope, false),
        scalaxb.toXML[Double](__obj.ferry, Some("http://webservices.maplink2.com.br"), Some("ferry"), __scope, false))

  }

  trait DefaultGeneratedArrayOfRouteInfoFormat extends scalaxb.ElemNameParser[generated.ArrayOfRouteInfo] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfRouteInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfRouteInfo] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "RouteInfo")) ^^ {
        case p1 =>
          generated.ArrayOfRouteInfo(p1.toSeq map {
            scalaxb.fromXML[generated.RouteInfo](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfRouteInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RouteInfo flatMap {
        scalaxb.toXML[generated.RouteInfo](_, Some("http://webservices.maplink2.com.br"), Some("RouteInfo"), __scope, false)
      })

  }

  trait DefaultGeneratedGetMultiRouteFormat extends scalaxb.ElemNameParser[generated.GetMultiRoute] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetMultiRoute] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "request")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetMultiRoute(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfMultiRouteRequest](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetMultiRoute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.request map {
        scalaxb.toXML[generated.ArrayOfMultiRouteRequest](_, Some("http://webservices.maplink2.com.br"), Some("request"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedArrayOfMultiRouteRequestFormat extends scalaxb.ElemNameParser[generated.ArrayOfMultiRouteRequest] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfMultiRouteRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfMultiRouteRequest] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "MultiRouteRequest")) ^^ {
        case p1 =>
          generated.ArrayOfMultiRouteRequest(p1.toSeq map {
            scalaxb.fromXML[generated.MultiRouteRequest](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfMultiRouteRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.MultiRouteRequest flatMap {
        scalaxb.toXML[generated.MultiRouteRequest](_, Some("http://webservices.maplink2.com.br"), Some("MultiRouteRequest"), __scope, false)
      })

  }

  trait DefaultGeneratedMultiRouteRequestFormat extends scalaxb.ElemNameParser[generated.MultiRouteRequest] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("MultiRouteRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.MultiRouteRequest] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "origin")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "destination")) ^^ {
        case p1 ~ p2 =>
          generated.MultiRouteRequest(scalaxb.fromXML[generated.RouteStop](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.RouteStop](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.MultiRouteRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.RouteStop](__obj.origin, Some("http://webservices.maplink2.com.br"), Some("origin"), __scope, false),
        scalaxb.toXML[generated.RouteStop](__obj.destination, Some("http://webservices.maplink2.com.br"), Some("destination"), __scope, false))

  }

  trait DefaultGeneratedGetMultiRouteResponseFormat extends scalaxb.ElemNameParser[generated.GetMultiRouteResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetMultiRouteResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getMultiRouteResult")) ^^ {
        case p1 =>
          generated.GetMultiRouteResponse(scalaxb.fromXML[generated.MultiRoute](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetMultiRouteResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.MultiRoute](__obj.getMultiRouteResult, Some("http://webservices.maplink2.com.br"), Some("getMultiRouteResult"), __scope, false))

  }

  trait DefaultGeneratedMultiRouteFormat extends scalaxb.ElemNameParser[generated.MultiRoute] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("MultiRoute")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.MultiRoute] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "singleRouteTotals")) ^^ {
        case p1 =>
          generated.MultiRoute(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfSingleRouteTotals](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: generated.MultiRoute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.singleRouteTotals map {
        scalaxb.toXML[generated.ArrayOfSingleRouteTotals](_, Some("http://webservices.maplink2.com.br"), Some("singleRouteTotals"), __scope, false)
      } getOrElse {
        Nil
      })

  }

  trait DefaultGeneratedArrayOfSingleRouteTotalsFormat extends scalaxb.ElemNameParser[generated.ArrayOfSingleRouteTotals] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("ArrayOfSingleRouteTotals")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.ArrayOfSingleRouteTotals] =
      phrase(rep(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "SingleRouteTotals")) ^^ {
        case p1 =>
          generated.ArrayOfSingleRouteTotals(p1.toSeq map {
            scalaxb.fromXML[generated.SingleRouteTotals](_, scalaxb.ElemName(node) :: stack)
          }: _*)
      })

    def writesChildNodes(__obj: generated.ArrayOfSingleRouteTotals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SingleRouteTotals flatMap {
        scalaxb.toXML[generated.SingleRouteTotals](_, Some("http://webservices.maplink2.com.br"), Some("SingleRouteTotals"), __scope, false)
      })

  }

  trait DefaultGeneratedSingleRouteTotalsFormat extends scalaxb.ElemNameParser[generated.SingleRouteTotals] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("SingleRouteTotals")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.SingleRouteTotals] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "origin")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "destin")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "routeTotals")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "logRouteId")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "mapInfo")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
          generated.SingleRouteTotals(scalaxb.fromXML[generated.RouteStop](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.RouteStop](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.RouteTotals](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            },
            scalaxb.fromXML[generated.MapInfo](p5, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.SingleRouteTotals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.RouteStop](__obj.origin, Some("http://webservices.maplink2.com.br"), Some("origin"), __scope, false),
        scalaxb.toXML[generated.RouteStop](__obj.destin, Some("http://webservices.maplink2.com.br"), Some("destin"), __scope, false),
        scalaxb.toXML[generated.RouteTotals](__obj.routeTotals, Some("http://webservices.maplink2.com.br"), Some("routeTotals"), __scope, false),
        __obj.logRouteId map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("logRouteId"), __scope, false)
        } getOrElse {
          Nil
        },
        scalaxb.toXML[generated.MapInfo](__obj.mapInfo, Some("http://webservices.maplink2.com.br"), Some("mapInfo"), __scope, false))

  }

  trait DefaultGeneratedGetRouteFormat extends scalaxb.ElemNameParser[generated.GetRoute] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRoute] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "rs")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetRoute(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteStop](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRoute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rs map {
        scalaxb.toXML[generated.ArrayOfRouteStop](_, Some("http://webservices.maplink2.com.br"), Some("rs"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetRouteResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getRouteResult")) ^^ {
        case p1 =>
          generated.GetRouteResponse(scalaxb.fromXML[generated.RouteInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetRouteResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.RouteInfo](__obj.getRouteResult, Some("http://webservices.maplink2.com.br"), Some("getRouteResult"), __scope, false))

  }

  trait DefaultGeneratedGetRouteSummaryFormat extends scalaxb.ElemNameParser[generated.GetRouteSummary] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteSummary] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "rs")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetRouteSummary(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteStop](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRouteSummary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rs map {
        scalaxb.toXML[generated.ArrayOfRouteStop](_, Some("http://webservices.maplink2.com.br"), Some("rs"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetRouteSummaryResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteSummaryResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteSummaryResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getRouteSummaryResult")) ^^ {
        case p1 =>
          generated.GetRouteSummaryResponse(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteSummary](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: generated.GetRouteSummaryResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getRouteSummaryResult map {
        scalaxb.toXML[generated.ArrayOfRouteSummary](_, Some("http://webservices.maplink2.com.br"), Some("getRouteSummaryResult"), __scope, false)
      } getOrElse {
        Nil
      })

  }

  trait DefaultGeneratedGetRouteDescriptionFormat extends scalaxb.ElemNameParser[generated.GetRouteDescription] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "rs")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 =>
          generated.GetRouteDescription(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteStop](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            p3.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRouteDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rs map {
        scalaxb.toXML[generated.ArrayOfRouteStop](_, Some("http://webservices.maplink2.com.br"), Some("rs"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedGetRouteDescriptionResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteDescriptionResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteDescriptionResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getRouteDescriptionResult")) ^^ {
        case p1 =>
          generated.GetRouteDescriptionResponse(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfSegmentDescription](_, scalaxb.ElemName(node) :: stack)
          })
      })

    def writesChildNodes(__obj: generated.GetRouteDescriptionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getRouteDescriptionResult map {
        scalaxb.toXML[generated.ArrayOfSegmentDescription](_, Some("http://webservices.maplink2.com.br"), Some("getRouteDescriptionResult"), __scope, false)
      } getOrElse {
        Nil
      })

  }

  trait DefaultGeneratedGetRouteWithMapFormat extends scalaxb.ElemNameParser[generated.GetRouteWithMap] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteWithMap] =
      phrase(opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "rs")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "ro")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "mo")) ~
        opt(scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "token")) ^^ {
        case p1 ~ p2 ~ p3 ~ p4 =>
          generated.GetRouteWithMap(p1.headOption map {
            scalaxb.fromXML[generated.ArrayOfRouteStop](_, scalaxb.ElemName(node) :: stack)
          },
            scalaxb.fromXML[generated.RouteOptions](p2, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.MapOptions](p3, scalaxb.ElemName(node) :: stack),
            p4.headOption map {
              scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack)
            })
      })

    def writesChildNodes(__obj: generated.GetRouteWithMap, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rs map {
        scalaxb.toXML[generated.ArrayOfRouteStop](_, Some("http://webservices.maplink2.com.br"), Some("rs"), __scope, false)
      } getOrElse {
        Nil
      },
        scalaxb.toXML[generated.RouteOptions](__obj.ro, Some("http://webservices.maplink2.com.br"), Some("ro"), __scope, false),
        scalaxb.toXML[generated.MapOptions](__obj.mo, Some("http://webservices.maplink2.com.br"), Some("mo"), __scope, false),
        __obj.token map {
          scalaxb.toXML[String](_, Some("http://webservices.maplink2.com.br"), Some("token"), __scope, false)
        } getOrElse {
          Nil
        })

  }

  trait DefaultGeneratedMapOptionsFormat extends scalaxb.ElemNameParser[generated.MapOptions] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("MapOptions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.MapOptions] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "scaleBar")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "mapSize")) ^^ {
        case p1 ~ p2 =>
          generated.MapOptions(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[generated.MapSize](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.MapOptions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.scaleBar, Some("http://webservices.maplink2.com.br"), Some("scaleBar"), __scope, false),
        scalaxb.toXML[generated.MapSize](__obj.mapSize, Some("http://webservices.maplink2.com.br"), Some("mapSize"), __scope, false))

  }

  trait DefaultGeneratedMapSizeFormat extends scalaxb.ElemNameParser[generated.MapSize] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    override def typeName: Option[String] = Some("MapSize")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.MapSize] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "width")) ~
        (scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "height")) ^^ {
        case p1 ~ p2 =>
          generated.MapSize(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
            scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.MapSize, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.width, Some("http://webservices.maplink2.com.br"), Some("width"), __scope, false),
        scalaxb.toXML[Int](__obj.height, Some("http://webservices.maplink2.com.br"), Some("height"), __scope, false))

  }

  trait DefaultGeneratedGetRouteWithMapResponseFormat extends scalaxb.ElemNameParser[generated.GetRouteWithMapResponse] {
    val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.GetRouteWithMapResponse] =
      phrase((scalaxb.ElemName(Some("http://webservices.maplink2.com.br"), "getRouteWithMapResult")) ^^ {
        case p1 =>
          generated.GetRouteWithMapResponse(scalaxb.fromXML[generated.RouteInfo](p1, scalaxb.ElemName(node) :: stack))
      })

    def writesChildNodes(__obj: generated.GetRouteWithMapResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated.RouteInfo](__obj.getRouteWithMapResult, Some("http://webservices.maplink2.com.br"), Some("getRouteWithMapResult"), __scope, false))

  }


  trait RouteSoap12Bindings {
    this: scalaxb.SoapClients =>
    lazy val targetNamespace: Option[String] = Some("http://webservices.maplink2.com.br")
    lazy val service: generated.RouteSoap = new RouteSoap12Binding {}

    def baseAddress = new java.net.URI("http://services.maplink.com.br/webservices/v3/route/route.asmx")

    trait RouteSoap12Binding extends generated.RouteSoap {
      def getRouteTotals(rs: Option[generated.ArrayOfRouteStop], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.RouteTotals] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRouteTotals(rs, ro, token), Some("http://webservices.maplink2.com.br"), "getRouteTotals", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getRouteTotals"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteTotalsResponse](body.headOption getOrElse {
              body
            }).getRouteTotalsResult)
        }

      def getRouteTotalsBatch(ra: Option[generated.ArrayOfRouteArray], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.GetRouteTotalsBatchResponse] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRouteTotalsBatch(ra, ro, token), Some("http://webservices.maplink2.com.br"), "GetRouteTotalsBatch", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/GetRouteTotalsBatch"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteTotalsBatchResponse](body.headOption getOrElse {
              body
            }))
        }

      def getRouteWithAlternatives(rs: Option[generated.ArrayOfRouteStop], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.AlternativeRouteInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRouteWithAlternatives(rs, ro, token), Some("http://webservices.maplink2.com.br"), "getRouteWithAlternatives", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getRouteWithAlternatives"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteWithAlternativesResponse](body.headOption getOrElse {
              body
            }).getRouteWithAlternativesResult)
        }

      def getMultiRoute(request: Option[generated.ArrayOfMultiRouteRequest], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.MultiRoute] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetMultiRoute(request, ro, token), Some("http://webservices.maplink2.com.br"), "getMultiRoute", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getMultiRoute"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetMultiRouteResponse](body.headOption getOrElse {
              body
            }).getMultiRouteResult)
        }

      def getRoute(rs: Option[generated.ArrayOfRouteStop], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.RouteInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRoute(rs, ro, token), Some("http://webservices.maplink2.com.br"), "getRoute", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getRoute"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteResponse](body.headOption getOrElse {
              body
            }).getRouteResult)
        }

      def getRouteSummary(rs: Option[generated.ArrayOfRouteStop], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.GetRouteSummaryResponse] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRouteSummary(rs, ro, token), Some("http://webservices.maplink2.com.br"), "getRouteSummary", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getRouteSummary"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteSummaryResponse](body.headOption getOrElse {
              body
            }))
        }

      def getRouteDescription(rs: Option[generated.ArrayOfRouteStop], ro: generated.RouteOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.GetRouteDescriptionResponse] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRouteDescription(rs, ro, token), Some("http://webservices.maplink2.com.br"), "getRouteDescription", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getRouteDescription"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteDescriptionResponse](body.headOption getOrElse {
              body
            }))
        }

      def getRouteWithMap(rs: Option[generated.ArrayOfRouteStop], ro: generated.RouteOptions, mo: generated.MapOptions, token: Option[String]): Either[scalaxb.Fault[Any], generated.RouteInfo] =
        soapClient.requestResponse(scalaxb.toXML(generated.GetRouteWithMap(rs, ro, mo, token), Some("http://webservices.maplink2.com.br"), "getRouteWithMap", defaultScope),
          Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://webservices.maplink2.com.br/getRouteWithMap"))) match {
          case Left(x) => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[generated.GetRouteWithMapResponse](body.headOption getOrElse {
              body
            }).getRouteWithMapResult)
        }
    }

  }


}

