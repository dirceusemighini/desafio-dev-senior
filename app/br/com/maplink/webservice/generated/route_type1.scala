// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package generated


case class GetRouteTotals(rs: Option[generated.ArrayOfRouteStop] = None,
                          ro: generated.RouteOptions,
                          token: Option[String] = None)


case class ArrayOfRouteStop(RouteStop: generated.RouteStop*)


case class RouteStop(description: Option[String] = None,
                     point: generated.Point)


case class Point(x: Double,
                 y: Double)


case class RouteOptions(language: Option[String] = None,
                        routeDetails: generated.RouteDetails,
                        vehicle: generated.Vehicle,
                        routeLine: Option[generated.ArrayOfRouteLine] = None)


case class RouteDetails(descriptionType: Int,
                        routeType: Int,
                        optimizeRoute: Boolean,
                        poiRoute: Option[generated.ArrayOfString] = None,
                        barriersList: Option[generated.ArrayOfString] = None,
                        barrierPoints: Option[generated.ArrayOfPoint] = None)


case class ArrayOfString(string: Option[String]*)


case class ArrayOfPoint(Point: generated.Point*)


case class Vehicle(tankCapacity: Int,
                   averageConsumption: Float,
                   fuelPrice: Double,
                   averageSpeed: Int,
                   tollFeeCat: Int)


case class ArrayOfRouteLine(RouteLine: generated.RouteLine*)


case class RouteLine(width: Int,
                     RGB: Option[String] = None,
                     transparency: Double)


case class GetRouteTotalsResponse(getRouteTotalsResult: generated.RouteTotals)


case class RouteTotals(totalDistance: Double,
                       totalTime: Option[String] = None,
                       totalFuelUsed: Double,
                       totaltollFeeCost: Double,
                       totalfuelCost: Double,
                       totalCost: Double,
                       taxiFare1: Double,
                       taxiFare2: Double)


case class GetRouteTotalsBatch(ra: Option[generated.ArrayOfRouteArray] = None,
                               ro: generated.RouteOptions,
                               token: Option[String] = None)


case class ArrayOfRouteArray(RouteArray: generated.RouteArray*)


case class RouteArray(Origin: generated.RouteStop,
                      Dest: generated.RouteStop)


case class GetRouteTotalsBatchResponse(GetRouteTotalsBatchResult: Option[generated.ArrayOfRouteTotals] = None)


case class ArrayOfRouteTotals(RouteTotals: generated.RouteTotals*)


case class GetRouteWithAlternatives(rs: Option[generated.ArrayOfRouteStop] = None,
                                    ro: generated.RouteOptions,
                                    token: Option[String] = None)


case class GetRouteWithAlternativesResponse(getRouteWithAlternativesResult: generated.AlternativeRouteInfo)


case class AlternativeRouteInfo(mainRoute: generated.RouteInfo,
                                alternatives: Option[generated.ArrayOfRouteInfo] = None)


case class RouteInfo(routeId: Option[String] = None,
                     MapInfo: generated.MapInfo,
                     segDescription: Option[generated.ArrayOfSegmentDescription] = None,
                     routeTotals: generated.RouteTotals,
                     routeSummary: Option[generated.ArrayOfRouteSummary] = None,
                     roadType: generated.RoadType)


case class MapInfo(url: Option[String] = None,
                   extent: generated.Extent)


case class Extent(XMin: Double,
                  YMin: Double,
                  XMax: Double,
                  YMax: Double)


case class ArrayOfSegmentDescription(SegmentDescription: generated.SegmentDescription*)


case class SegmentDescription(command: Option[String] = None,
                              description: Option[String] = None,
                              poiRoute: Option[String] = None,
                              poiRouteDetails: Option[generated.ArrayOfPOIDetails] = None,
                              city: generated.City,
                              tollFee: Option[String] = None,
                              tollFeeDetails: generated.TollFeeDetails,
                              roadType: Option[String] = None,
                              distance: Double,
                              cumulativeDistance: Double,
                              point: generated.Point)


case class ArrayOfPOIDetails(POIDetails: generated.POIDetails*)


case class POIDetails(clientID: Option[String] = None,
                      name: Option[String] = None,
                      addressInfo: Option[String] = None,
                      source: Option[String] = None,
                      point: generated.Point)


case class City(name: Option[String] = None,
                state: Option[String] = None)


case class TollFeeDetails(name: Option[String] = None,
                          direction: Option[String] = None,
                          address: Option[String] = None,
                          concession: Option[String] = None,
                          phone: Option[String] = None,
                          state: Option[String] = None,
                          price: Double,
                          pricePerAxle: Double)


case class ArrayOfRouteSummary(RouteSummary: generated.RouteSummary*)


case class RouteSummary(description: Option[String] = None,
                        distance: Double,
                        point: generated.Point)


case class RoadType(twoLaneHighway: Double,
                    secondLaneUnderConstruction: Double,
                    oneLaneRoadway: Double,
                    pavingWorkInProgress: Double,
                    dirtRoad: Double,
                    roadwayInPoorConditions: Double,
                    ferry: Double)


case class ArrayOfRouteInfo(RouteInfo: generated.RouteInfo*)


case class GetMultiRoute(request: Option[generated.ArrayOfMultiRouteRequest] = None,
                         ro: generated.RouteOptions,
                         token: Option[String] = None)


case class ArrayOfMultiRouteRequest(MultiRouteRequest: generated.MultiRouteRequest*)


case class MultiRouteRequest(origin: generated.RouteStop,
                             destination: generated.RouteStop)


case class GetMultiRouteResponse(getMultiRouteResult: generated.MultiRoute)


case class MultiRoute(singleRouteTotals: Option[generated.ArrayOfSingleRouteTotals] = None)


case class ArrayOfSingleRouteTotals(SingleRouteTotals: generated.SingleRouteTotals*)


case class SingleRouteTotals(origin: generated.RouteStop,
                             destin: generated.RouteStop,
                             routeTotals: generated.RouteTotals,
                             logRouteId: Option[String] = None,
                             mapInfo: generated.MapInfo)


case class GetRoute(rs: Option[generated.ArrayOfRouteStop] = None,
                    ro: generated.RouteOptions,
                    token: Option[String] = None)


case class GetRouteResponse(getRouteResult: generated.RouteInfo)


case class GetRouteSummary(rs: Option[generated.ArrayOfRouteStop] = None,
                           ro: generated.RouteOptions,
                           token: Option[String] = None)


case class GetRouteSummaryResponse(getRouteSummaryResult: Option[generated.ArrayOfRouteSummary] = None)


case class GetRouteDescription(rs: Option[generated.ArrayOfRouteStop] = None,
                               ro: generated.RouteOptions,
                               token: Option[String] = None)


case class GetRouteDescriptionResponse(getRouteDescriptionResult: Option[generated.ArrayOfSegmentDescription] = None)


case class GetRouteWithMap(rs: Option[generated.ArrayOfRouteStop] = None,
                           ro: generated.RouteOptions,
                           mo: generated.MapOptions,
                           token: Option[String] = None)


case class MapOptions(scaleBar: Boolean,
                      mapSize: generated.MapSize)


case class MapSize(width: Int,
                   height: Int)


case class GetRouteWithMapResponse(getRouteWithMapResult: generated.RouteInfo)

